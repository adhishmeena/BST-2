BST Class
Send Feedback
Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.




// Main Code

/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

// class BSTDELETERETUR
// {
//     BinaryTreeNode<Integer>  root;
//     boolean deleted;
    
//     public BSTDELETERETUR(BinaryTreeNode<Integer>  root, boolean deleted)
//     {
//         this.root=root;
//         this.deleted=deleted;
//     }
// }



public class BinarySearchTree {
    static int size=0;
    private static BinaryTreeNode<Integer>  root=null;
    
    private static BinaryTreeNode<Integer> insert(BinaryTreeNode<Integer> node , int data)
    {
        
        if(node==null)
    {
        BinaryTreeNode<Integer> new_node=new BinaryTreeNode<Integer>(data);
        return new_node;
    }
     
        
        if(data>node.data){
         node.right=insert(node.right ,data);         
     }
    
    else{ // we are adding less than and equal to value in left sub tree
           node.left=insert(node.left ,data);
        }
     
     return node;      
    }
    
    
    
	public void insert(int data) {
      root=insert(root,data);
        size++;
        
		//Implement the insert() function
	}
	
    private static int minimum(BinaryTreeNode<Integer>  root)
    {
        if(root==null)
        {
            return Integer.MAX_VALUE;
        }
        
        int minleft=minimum(root.left);
        int minright=minimum(root.right);
        
       return Math.min(root.data, Math.min(minleft,minright));
        
        
    }
    
    
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
//     private static BSTDELETERETUR Deletedatahelper(BinaryTreeNode<Integer>  node , int x )
//     {
//         if(node==null)
//     {   
//         return new BSTDELETERETUR(null, false);
        
        
//     }
        
//      if(node.data<x)
//      {
//          BSTDELETERETUR outputright=Deletedatahelper(node.right , x );
//          node.right=outputright.root;
//          outputright.root=node;
//          return outputright;
         
//      }
     
     
//      if(node.data>x)
//      {
       
//          BSTDELETERETUR outputleft=Deletedatahelper(node.left , x );
//          node.left=outputleft.root;
//          outputleft.root=node;
//          return outputleft;
           
         
//      }
//      // if above conditions does not work it means x==root.data 
//      // 0 child 
//      if(node.left==null && node.right==null)
//      {
//         return new BSTDELETERETUR(null, true);
//      }
     
//      // only left child
//      if(node.left!=null && node.right==null)
//      {
//                  return new BSTDELETERETUR(node.left, true);
     
//      }
//      //only right child
//      if(node.left==null && node.right!=null)
//      {
//                  return new BSTDELETERETUR(node.right, true);
     
//      }
     
//      // both children are present 
//      int rightmin=minimum(node.right);
//      node.data=rightmin	;
//      BSTDELETERETUR outputright=Deletedatahelper(node.right ,rightmin );
//      node.right=outputright.root;
//       return new BSTDELETERETUR(node,true);
     
     
     
     
     
     
     
     
//     }
    
    
    
	private BinaryTreeNode<Integer> deleteData(int data, BinaryTreeNode<Integer> root) {
		if (root == null) {
			return null;
		}
		if (data < root.data) {
			root.left = deleteData(data, root.left);
			return root;
		} else if (data > root.data) {
			root.right = deleteData(data, root.right);
			return root;
		} else {
			if (root.left == null && root.right == null) {
				return null;
			} else if (root.left == null) {
				return root.right;
			} else if (root.right == null) {
				return root.left;
			} else {
				BinaryTreeNode<Integer> minNode = root.right;
				while (minNode.left != null) {
					minNode = minNode.left;
				}
				root.data = minNode.data;
				root.right = deleteData(minNode.data, root.right);
				return root;
			}
		}
    }
        
	public void remove(int data) {
        root = deleteData(data, root);
	}
	
    private static void printhelper(BinaryTreeNode<Integer>  root)
    {
        if(root==null)
    {
        return ;
    }
     
     System.out.print(root.data+":");
     
     if (root.left!=null)
     {
        System.out.print("L:"+root.left.data+",");
     }
     
     if(root.right!=null)
     {
               System.out.print("R:"+root.right.data);
  
     }
     System.out.println();
     printhelper(root.left);
     printhelper(root.right);
     
     
        
     
     
     
     
    }
    
    
    
	public void printTree() {
        printhelper(root);
		//Implement the printTree() function
	}
    
    public static boolean searchhelper( BinaryTreeNode<Integer> root , int data)
    {
        if(root==null)
        {
            return false;
        }
        
        if(root.data==data)
        {
            return true;
        }
        
        if(root.data<data)
        {
           return searchhelper( root.right , data);
        }
         else
        {
           return searchhelper( root.left, data);
        }
        
        
        
    }
	
	public boolean search(int data) {
        
        return searchhelper(root ,data);
		//Implement the search() function
	}
	

}
